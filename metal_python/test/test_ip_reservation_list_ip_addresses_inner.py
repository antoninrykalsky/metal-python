# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import metal_python
from metal_python.models.ip_reservation_list_ip_addresses_inner import IPReservationListIpAddressesInner  # noqa: E501
from metal_python.rest import ApiException

class TestIPReservationListIpAddressesInner(unittest.TestCase):
    """IPReservationListIpAddressesInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test IPReservationListIpAddressesInner
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IPReservationListIpAddressesInner`
        """
        model = metal_python.models.ip_reservation_list_ip_addresses_inner.IPReservationListIpAddressesInner()  # noqa: E501
        if include_optional :
            return IPReservationListIpAddressesInner(
                addon = True, 
                address = '', 
                address_family = 56, 
                assignments = [
                    metal_python.models.href.Href(
                        href = '', )
                    ], 
                available = '', 
                bill = True, 
                cidr = 56, 
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                customdata = metal_python.models.customdata.customdata(), 
                enabled = True, 
                details = '', 
                facility = None, 
                gateway = '', 
                global_ip = True, 
                href = '', 
                id = '', 
                manageable = True, 
                management = True, 
                metal_gateway = metal_python.models.metal_gateway_lite.MetalGatewayLite(
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    gateway_address = '10.1.2.1/27', 
                    href = '', 
                    id = '', 
                    state = 'ready', 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    vlan = 1001, ), 
                metro = metal_python.models.metro.Metro(
                    code = '', 
                    country = '', 
                    id = '', 
                    name = '', 
                    href = '', ), 
                netmask = '', 
                network = '', 
                project = metal_python.models.project.Project(
                    bgp_config = metal_python.models.href.Href(
                        href = '', ), 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    customdata = metal_python.models.customdata.customdata(), 
                    devices = [
                        metal_python.models.href.Href(
                            href = '', )
                        ], 
                    id = '', 
                    invitations = [
                        
                        ], 
                    max_devices = metal_python.models.max_devices.max_devices(), 
                    members = [
                        
                        ], 
                    memberships = [
                        
                        ], 
                    name = '', 
                    network_status = metal_python.models.network_status.network_status(), 
                    payment_method = , 
                    ssh_keys = [
                        
                        ], 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    volumes = [
                        
                        ], 
                    organization = , 
                    href = '', 
                    backend_transfer_enabled = True, ), 
                project_lite = metal_python.models.project.Project(
                    bgp_config = metal_python.models.href.Href(
                        href = '', ), 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    customdata = metal_python.models.customdata.customdata(), 
                    devices = [
                        metal_python.models.href.Href(
                            href = '', )
                        ], 
                    id = '', 
                    invitations = [
                        
                        ], 
                    max_devices = metal_python.models.max_devices.max_devices(), 
                    members = [
                        
                        ], 
                    memberships = [
                        
                        ], 
                    name = '', 
                    network_status = metal_python.models.network_status.network_status(), 
                    payment_method = , 
                    ssh_keys = [
                        
                        ], 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    volumes = [
                        
                        ], 
                    organization = , 
                    href = '', 
                    backend_transfer_enabled = True, ), 
                requested_by = metal_python.models.href.Href(
                    href = '', ), 
                public = True, 
                state = '', 
                tags = [
                    ''
                    ], 
                type = 'vrf', 
                created_by = metal_python.models.href.Href(
                    href = '', ), 
                vrf = metal_python.models.vrf.Vrf(
                    id = '', 
                    name = '', 
                    description = '', 
                    local_asn = 56, 
                    ip_ranges = [
                        ''
                        ], 
                    project = metal_python.models.project.Project(
                        bgp_config = metal_python.models.href.Href(
                            href = '', ), 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        customdata = metal_python.models.customdata.customdata(), 
                        devices = [
                            metal_python.models.href.Href(
                                href = '', )
                            ], 
                        id = '', 
                        invitations = [
                            
                            ], 
                        max_devices = metal_python.models.max_devices.max_devices(), 
                        members = [
                            
                            ], 
                        memberships = [
                            
                            ], 
                        name = '', 
                        network_status = metal_python.models.network_status.network_status(), 
                        payment_method = , 
                        ssh_keys = [
                            
                            ], 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        volumes = [
                            
                            ], 
                        organization = , 
                        href = '', 
                        backend_transfer_enabled = True, ), 
                    metro = metal_python.models.metro.Metro(
                        code = '', 
                        country = '', 
                        id = '', 
                        name = '', 
                        href = '', ), 
                    created_by = metal_python.models.user.User(
                        avatar_thumb_url = '', 
                        avatar_url = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        customdata = metal_python.models.customdata.customdata(), 
                        email = '', 
                        emails = [
                            
                            ], 
                        first_name = '', 
                        fraud_score = '', 
                        full_name = '', 
                        href = '', 
                        id = '', 
                        last_login_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_name = '', 
                        max_organizations = 56, 
                        max_projects = 56, 
                        phone_number = '', 
                        short_id = '', 
                        timezone = '', 
                        two_factor_auth = '', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    href = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else :
            return IPReservationListIpAddressesInner(
                type = 'vrf',
                vrf = metal_python.models.vrf.Vrf(
                    id = '', 
                    name = '', 
                    description = '', 
                    local_asn = 56, 
                    ip_ranges = [
                        ''
                        ], 
                    project = metal_python.models.project.Project(
                        bgp_config = metal_python.models.href.Href(
                            href = '', ), 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        customdata = metal_python.models.customdata.customdata(), 
                        devices = [
                            metal_python.models.href.Href(
                                href = '', )
                            ], 
                        id = '', 
                        invitations = [
                            
                            ], 
                        max_devices = metal_python.models.max_devices.max_devices(), 
                        members = [
                            
                            ], 
                        memberships = [
                            
                            ], 
                        name = '', 
                        network_status = metal_python.models.network_status.network_status(), 
                        payment_method = , 
                        ssh_keys = [
                            
                            ], 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        volumes = [
                            
                            ], 
                        organization = , 
                        href = '', 
                        backend_transfer_enabled = True, ), 
                    metro = metal_python.models.metro.Metro(
                        code = '', 
                        country = '', 
                        id = '', 
                        name = '', 
                        href = '', ), 
                    created_by = metal_python.models.user.User(
                        avatar_thumb_url = '', 
                        avatar_url = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        customdata = metal_python.models.customdata.customdata(), 
                        email = '', 
                        emails = [
                            
                            ], 
                        first_name = '', 
                        fraud_score = '', 
                        full_name = '', 
                        href = '', 
                        id = '', 
                        last_login_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_name = '', 
                        max_organizations = 56, 
                        max_projects = 56, 
                        phone_number = '', 
                        short_id = '', 
                        timezone = '', 
                        two_factor_auth = '', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    href = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
        )
        """

    def testIPReservationListIpAddressesInner(self):
        """Test IPReservationListIpAddressesInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

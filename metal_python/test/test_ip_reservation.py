# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import metal_python
from metal_python.models.ip_reservation import IPReservation  # noqa: E501
from metal_python.rest import ApiException

class TestIPReservation(unittest.TestCase):
    """IPReservation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test IPReservation
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IPReservation`
        """
        model = metal_python.models.ip_reservation.IPReservation()  # noqa: E501
        if include_optional :
            return IPReservation(
                addon = True, 
                address = '', 
                address_family = 56, 
                assignments = [
                    metal_python.models.ip_assignment.IPAssignment(
                        address = '', 
                        address_family = 56, 
                        assigned_to = metal_python.models.href.Href(
                            href = '', ), 
                        cidr = 56, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        enabled = True, 
                        gateway = '', 
                        global_ip = True, 
                        href = '', 
                        id = '', 
                        manageable = True, 
                        management = True, 
                        metro = null, 
                        netmask = '', 
                        network = '', 
                        parent_block = metal_python.models.parent_block.ParentBlock(
                            cidr = 56, 
                            href = '', 
                            netmask = '', 
                            network = '', ), 
                        public = True, )
                    ], 
                available = '', 
                bill = True, 
                cidr = 56, 
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                customdata = metal_python.models.customdata.customdata(), 
                enabled = True, 
                details = '', 
                facility = None, 
                gateway = '', 
                global_ip = True, 
                href = '', 
                id = '', 
                manageable = True, 
                management = True, 
                metal_gateway = metal_python.models.metal_gateway_lite.MetalGatewayLite(
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    gateway_address = '10.1.2.1/27', 
                    href = '', 
                    id = '', 
                    state = 'ready', 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    vlan = 1001, ), 
                metro = None, 
                netmask = '', 
                network = '', 
                project = metal_python.models.project.Project(
                    bgp_config = metal_python.models.href.Href(
                        href = '', ), 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    customdata = metal_python.models.customdata.customdata(), 
                    devices = [
                        metal_python.models.href.Href(
                            href = '', )
                        ], 
                    id = '', 
                    invitations = [
                        
                        ], 
                    max_devices = metal_python.models.max_devices.max_devices(), 
                    members = [
                        
                        ], 
                    memberships = [
                        
                        ], 
                    name = '', 
                    network_status = metal_python.models.network_status.network_status(), 
                    payment_method = , 
                    ssh_keys = [
                        
                        ], 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    volumes = [
                        
                        ], 
                    organization = , 
                    href = '', 
                    backend_transfer_enabled = True, ), 
                project_lite = metal_python.models.href.Href(
                    href = '', ), 
                requested_by = metal_python.models.href.Href(
                    href = '', ), 
                public = True, 
                state = '', 
                tags = [
                    ''
                    ], 
                type = 'global_ipv4'
            )
        else :
            return IPReservation(
                type = 'global_ipv4',
        )
        """

    def testIPReservation(self):
        """Test IPReservation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

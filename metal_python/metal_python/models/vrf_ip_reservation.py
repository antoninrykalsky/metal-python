# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, validator
from metal_python.models.href import Href
from metal_python.models.metal_gateway_lite import MetalGatewayLite
from metal_python.models.metro import Metro
from metal_python.models.project import Project
from metal_python.models.vrf import Vrf

class VrfIpReservation(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    address_family: Optional[StrictInt] = None
    cidr: Optional[StrictInt] = None
    created_at: Optional[datetime] = None
    created_by: Optional[Href] = None
    details: Optional[StrictStr] = None
    href: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    metal_gateway: Optional[MetalGatewayLite] = None
    netmask: Optional[StrictStr] = None
    network: Optional[StrictStr] = None
    project: Optional[Project] = None
    state: Optional[StrictStr] = None
    tags: Optional[List[StrictStr]] = None
    type: StrictStr = ...
    vrf: Vrf = ...
    public: Optional[StrictBool] = None
    management: Optional[StrictBool] = None
    manageable: Optional[StrictBool] = None
    customdata: Optional[Dict[str, Any]] = None
    bill: Optional[StrictBool] = None
    project_lite: Optional[Project] = None
    address: Optional[StrictStr] = None
    gateway: Optional[StrictStr] = None
    metro: Optional[Metro] = None
    __properties = ["address_family", "cidr", "created_at", "created_by", "details", "href", "id", "metal_gateway", "netmask", "network", "project", "state", "tags", "type", "vrf", "public", "management", "manageable", "customdata", "bill", "project_lite", "address", "gateway", "metro"]

    @validator('type')
    def type_validate_enum(cls, v):
        if v not in ('vrf'):
            raise ValueError("must validate the enum values ('vrf')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VrfIpReservation:
        """Create an instance of VrfIpReservation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metal_gateway
        if self.metal_gateway:
            _dict['metal_gateway'] = self.metal_gateway.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vrf
        if self.vrf:
            _dict['vrf'] = self.vrf.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_lite
        if self.project_lite:
            _dict['project_lite'] = self.project_lite.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metro
        if self.metro:
            _dict['metro'] = self.metro.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VrfIpReservation:
        """Create an instance of VrfIpReservation from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return VrfIpReservation.parse_obj(obj)

        _obj = VrfIpReservation.parse_obj({
            "address_family": obj.get("address_family"),
            "cidr": obj.get("cidr"),
            "created_at": obj.get("created_at"),
            "created_by": Href.from_dict(obj.get("created_by")) if obj.get("created_by") is not None else None,
            "details": obj.get("details"),
            "href": obj.get("href"),
            "id": obj.get("id"),
            "metal_gateway": MetalGatewayLite.from_dict(obj.get("metal_gateway")) if obj.get("metal_gateway") is not None else None,
            "netmask": obj.get("netmask"),
            "network": obj.get("network"),
            "project": Project.from_dict(obj.get("project")) if obj.get("project") is not None else None,
            "state": obj.get("state"),
            "tags": obj.get("tags"),
            "type": obj.get("type"),
            "vrf": Vrf.from_dict(obj.get("vrf")) if obj.get("vrf") is not None else None,
            "public": obj.get("public"),
            "management": obj.get("management"),
            "manageable": obj.get("manageable"),
            "customdata": obj.get("customdata"),
            "bill": obj.get("bill"),
            "project_lite": Project.from_dict(obj.get("project_lite")) if obj.get("project_lite") is not None else None,
            "address": obj.get("address"),
            "gateway": obj.get("gateway"),
            "metro": Metro.from_dict(obj.get("metro")) if obj.get("metro") is not None else None
        })
        return _obj


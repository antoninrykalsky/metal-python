# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import json
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from metal_python.models.ip_assignment import IPAssignment
from metal_python.models.ip_reservation import IPReservation
from metal_python.models.vrf_ip_reservation import VrfIpReservation
from typing import Any, List
from pydantic import StrictStr, Field

FINDIPADDRESSBYID200RESPONSE_ONE_OF_SCHEMAS = ["IPAssignment", "IPReservation", "VrfIpReservation"]

class FindIPAddressById200Response(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    # data type: IPAssignment
    __oneof_schema_1: Optional[IPAssignment] = None
    # data type: IPReservation
    __oneof_schema_2: Optional[IPReservation] = None
    # data type: VrfIpReservation
    __oneof_schema_3: Optional[VrfIpReservation] = None
    actual_instance: Any
    one_of_schemas: List[str] = Field(FINDIPADDRESSBYID200RESPONSE_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        error_messages = []
        match = 0
        # validate data type: IPAssignment
        if type(v) is not IPAssignment:
            error_messages.append(f"Error! Input type `{type(v)}` is not `IPAssignment`")
        else:
            match += 1

        # validate data type: IPReservation
        if type(v) is not IPReservation:
            error_messages.append(f"Error! Input type `{type(v)}` is not `IPReservation`")
        else:
            match += 1

        # validate data type: VrfIpReservation
        if type(v) is not VrfIpReservation:
            error_messages.append(f"Error! Input type `{type(v)}` is not `VrfIpReservation`")
        else:
            match += 1

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into FindIPAddressById200Response with oneOf schemas: IPAssignment, IPReservation, VrfIpReservation. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into FindIPAddressById200Response with oneOf schemas: IPAssignment, IPReservation, VrfIpReservation. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> FindIPAddressById200Response:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> FindIPAddressById200Response:
        """Returns the object represented by the json string"""
        instance = cls()
        error_messages = []
        match = 0

        # deserialize data into IPAssignment
        try:
            instance.actual_instance = IPAssignment.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into IPReservation
        try:
            instance.actual_instance = IPReservation.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into VrfIpReservation
        try:
            instance.actual_instance = VrfIpReservation.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into FindIPAddressById200Response with oneOf schemas: IPAssignment, IPReservation, VrfIpReservation. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into FindIPAddressById200Response with oneOf schemas: IPAssignment, IPReservation, VrfIpReservation. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_json()
        else:
            return "null"

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_dict()
        else:
            return dict()

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())





